// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package devicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	ListDeviceProcesses(ctx context.Context, in *ListDeviceProcessesRequest, opts ...grpc.CallOption) (*ListDeviceProcessesResponse, error)
	StreamDeviceProcesses(ctx context.Context, in *StreamDeviceProcessesRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceProcessesClient, error)
	KillGpuProcess(ctx context.Context, in *KillGpuProcessRequest, opts ...grpc.CallOption) (*KillGpuProcessResponse, error)
	PatchConfigs(ctx context.Context, in *PatchConfigsRequest, opts ...grpc.CallOption) (*PatchConfigsResponse, error)
	PingServer(ctx context.Context, in *PingServerRequest, opts ...grpc.CallOption) (*PingServerResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) ListDeviceProcesses(ctx context.Context, in *ListDeviceProcessesRequest, opts ...grpc.CallOption) (*ListDeviceProcessesResponse, error) {
	out := new(ListDeviceProcessesResponse)
	err := c.cc.Invoke(ctx, "/device.v1.DeviceService/ListDeviceProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StreamDeviceProcesses(ctx context.Context, in *StreamDeviceProcessesRequest, opts ...grpc.CallOption) (DeviceService_StreamDeviceProcessesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceService_ServiceDesc.Streams[0], "/device.v1.DeviceService/StreamDeviceProcesses", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServiceStreamDeviceProcessesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceService_StreamDeviceProcessesClient interface {
	Recv() (*StreamDeviceProcessesResponse, error)
	grpc.ClientStream
}

type deviceServiceStreamDeviceProcessesClient struct {
	grpc.ClientStream
}

func (x *deviceServiceStreamDeviceProcessesClient) Recv() (*StreamDeviceProcessesResponse, error) {
	m := new(StreamDeviceProcessesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) KillGpuProcess(ctx context.Context, in *KillGpuProcessRequest, opts ...grpc.CallOption) (*KillGpuProcessResponse, error) {
	out := new(KillGpuProcessResponse)
	err := c.cc.Invoke(ctx, "/device.v1.DeviceService/KillGpuProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) PatchConfigs(ctx context.Context, in *PatchConfigsRequest, opts ...grpc.CallOption) (*PatchConfigsResponse, error) {
	out := new(PatchConfigsResponse)
	err := c.cc.Invoke(ctx, "/device.v1.DeviceService/PatchConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) PingServer(ctx context.Context, in *PingServerRequest, opts ...grpc.CallOption) (*PingServerResponse, error) {
	out := new(PingServerResponse)
	err := c.cc.Invoke(ctx, "/device.v1.DeviceService/PingServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	ListDeviceProcesses(context.Context, *ListDeviceProcessesRequest) (*ListDeviceProcessesResponse, error)
	StreamDeviceProcesses(*StreamDeviceProcessesRequest, DeviceService_StreamDeviceProcessesServer) error
	KillGpuProcess(context.Context, *KillGpuProcessRequest) (*KillGpuProcessResponse, error)
	PatchConfigs(context.Context, *PatchConfigsRequest) (*PatchConfigsResponse, error)
	PingServer(context.Context, *PingServerRequest) (*PingServerResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) ListDeviceProcesses(context.Context, *ListDeviceProcessesRequest) (*ListDeviceProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceProcesses not implemented")
}
func (UnimplementedDeviceServiceServer) StreamDeviceProcesses(*StreamDeviceProcessesRequest, DeviceService_StreamDeviceProcessesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceProcesses not implemented")
}
func (UnimplementedDeviceServiceServer) KillGpuProcess(context.Context, *KillGpuProcessRequest) (*KillGpuProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillGpuProcess not implemented")
}
func (UnimplementedDeviceServiceServer) PatchConfigs(context.Context, *PatchConfigsRequest) (*PatchConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchConfigs not implemented")
}
func (UnimplementedDeviceServiceServer) PingServer(context.Context, *PingServerRequest) (*PingServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_ListDeviceProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListDeviceProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v1.DeviceService/ListDeviceProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListDeviceProcesses(ctx, req.(*ListDeviceProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StreamDeviceProcesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceProcessesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServiceServer).StreamDeviceProcesses(m, &deviceServiceStreamDeviceProcessesServer{stream})
}

type DeviceService_StreamDeviceProcessesServer interface {
	Send(*StreamDeviceProcessesResponse) error
	grpc.ServerStream
}

type deviceServiceStreamDeviceProcessesServer struct {
	grpc.ServerStream
}

func (x *deviceServiceStreamDeviceProcessesServer) Send(m *StreamDeviceProcessesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceService_KillGpuProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillGpuProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).KillGpuProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v1.DeviceService/KillGpuProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).KillGpuProcess(ctx, req.(*KillGpuProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_PatchConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).PatchConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v1.DeviceService/PatchConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).PatchConfigs(ctx, req.(*PatchConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v1.DeviceService/PingServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).PingServer(ctx, req.(*PingServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.v1.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeviceProcesses",
			Handler:    _DeviceService_ListDeviceProcesses_Handler,
		},
		{
			MethodName: "KillGpuProcess",
			Handler:    _DeviceService_KillGpuProcess_Handler,
		},
		{
			MethodName: "PatchConfigs",
			Handler:    _DeviceService_PatchConfigs_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _DeviceService_PingServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDeviceProcesses",
			Handler:       _DeviceService_StreamDeviceProcesses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/v1/device.proto",
}
